<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>软件工程学概述</title>
</head>
<body>
<h2>软件工程学概述</h2>

<p>
    软件危机<br/>
    在计算机系统发展的早期时代，通用硬件相当普遍，软件却是为每个具体应用而专门编写的。
    这时的软件通常是规模较小的程序，编写者和使用者往往是同一个人。这种个体化的软件环境，
    使得软件设计通常是在人们头脑中进行的一个隐含的过程，除了程序清单之外，没有其他文档资料保存下来。
</p>

<p>
    <b>1.1.1软件危机的介绍</b><br/>
    软件危机是指计算机软件的开发和维护过程中所遇到的一系列严重问题。这些问题绝不仅仅是不能正常
    运行的软件才具有的，实际上，几乎所有软件都不同程度地存在这些问题。
</p>

<p>
    概括的说，软件危机包含下述两方面的问题：如何开发软件，以满足对软件日益增长的需求；如何维护数量不断膨胀的
    已有软件。
</p>

<p>
    软件危机主要有以下一些典型表现：
</p>
<ol>
    <li>对软件开发成本和进度的估计常常很不准确</li>
    <li>用户对“已完成的”软件系统不满意的现象经常发生</li>
    <li>软件产品的质量往往靠不住</li>
    <li>软件常常是不可维护的</li>
    <li>软件通常没有适当的文档资料</li>
    <li>软件成本在计算机系统总成本中所含的比例逐年上升</li>
    <li>软件开发生产率提高的速度</li>
</ol>
<div id="softwareproject">
    <b>1.2软件工程</b><br/>
    软件工程是把系统的、规范的、可度量的途径应用与软件开发、运行和维护国臣个，也就是把工程应用于软件；
    研究中提到的途径。<br/>
    <b>软件工程有下述的本质特性:</b><br/>
    <ol>
        <li>软件工程关注于大型程序的构造</li>
        <li>软件工程的中心课题是控制复杂性</li>
        <li>软件经常变化</li>
        <li>开发软件的效率非常重要</li>
        <li>和谐地合作是开发软件的关键</li>
        <li>软件必须有效的支持它的用户</li>
        <li>在软件工程英语中通常由具有一种文化背景的人替具有另一种文化背景的人创造产品</li>
    </ol>
</div>
<div>
    <b>软件工程的基本原理</b><br/>
    下面简要介绍软件工程的7条基本原理<br/>
    <ol>
        <li>用分阶段的生命周期计划严格管理</li>
        <li>坚持进行阶段评审</li>
        <li>实行严格的产品控制</li>
        <li>采用现代程序设计技术</li>
        <li>结果应能清楚地审查</li>
        <li>开发小组的人员应该少而精</li>
        <li>承认不断改进软件工程实践的必要性</li>
    </ol>
</div>
<div>
    <b>1.2.3软件工程方法学</b><br/>
    软件工程包含技术和管理两方面的内容，是技术与管理紧密结合所形成的工程学科。<br/>
    所谓管理就是通过计划、组织和控制等一系列活动，合理地配置和使用各种资源，以达到既定目标的过程<br/>
    软件工程方法学包含3个要素：方法、工具和过程。其中方法是完成阮佳开发的各项任务的技术方法，回答“怎样做”的问题<br/>
    工具是为运用方法而提出的自动的或半自动的软件工程支撑环境；过程是为了获得高质量的软件所需要完成的一系列任务的框架，
    它规定了完成各项任务的工作步骤。
</div>
<p>
    <b>1 传统方法学</b><br/>
    传统方法学也称为生命周期方法学或结构化范型。它采用结构化技术（结构化分析、结构化设计和结构化实现）来完成软件的开发的
    各项任务，并使用适当的软件工具或软件工程环境来支持结构化技术的运用。这种方法学把软件生命周期的全过程一次划分为若干抽象
    逻辑分析开始，一个阶段一个阶段的顺序进行开发。文档是通讯工具。结构化方法要么面向行为，要么面向数据<br/>
    <b>2 面向对象方法学</b><br/>
    当软件规模庞大，或者对软件的需求是模糊的或会随时间变化而变化的时候，使用传统方法学开发软件往往不成功，此外，使用传统
    方法学开发出的软件，维护起来仍然很困难。面向对象方法把数据和行为看成是同等重要的，它是一种以数据为主线，把数据和对数据
    的操作紧密的结合起来的方法。<br/>
    面向对象方法学具有下述4个要点:<br/>
</p>
<ol>
    <li>把对象Object作为融合了数据及在数据上的操作行为的统一的软件构件</li>
    <li>把所有对象都划分成类Class</li>
    <li>按照父类与子类的关系，把若干个相关类组成一个层次结构的系统</li>
    <li>对象彼此件仅能通过发送消息相互联系</li>
</ol>
<p>
    <b>1.3 软件生命周期</b><br/>
    概括的说，软件生命周期由软件定义、软件开发和运行维护3个时期组成，每个时期又进一步划分成若干个阶段.<br/>
    软件定义时期的任务是：确定软件开发工程必须完成的总目标；确定工程的可行性；导出实现工程目标应该采用的策略及系统必须完成的功能
    估计完成该项工程需要的资源和成本，并且指定工程进度表。<br/>
    开发时期具体设计和实现在前一个时期定义的软件，它通常由下述4个阶段组成：总体设计、详细设计、编码和单元测试、综合测试。
    <br/>
    维护时期的主要任务是使软件持久的满足用户的需求。
</p>
<div>
    生命周期阶段<br/>
    <ol>
        <li>问题定义</li>
        <li>可行性研究</li>
        <li>需求分析</li>
        <li>总体设计</li>
        <li>详细设计</li>
        <li>编码和单元测试</li>
        <li>综合测试</li>
    </ol>
</div>
</body>
</html>