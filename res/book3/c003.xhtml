<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>进程同步</title>
</head>
<body>
<h2>进程之间的同步</h2><br/>
进程的同步是指一组共行进程，各自以独立的、不可预知的速度向前推荐，在前进过程中彼此之间需要互相协调步伐，
才能正确地完成同一项任务。例如管道命令，就是需要两个进程合作的典型例子。<br/>

<p>进程间的互斥</p>
1、临界资源和临界区<br/>
进程之间的互斥是由于共享资源而引起的。为了描述这类情况，引入临界资源和临界区的概念。所谓临界资源，就是
一次仅允许一个进程使用的系统中的一些共享资源。这些资源既包括慢速的硬设备，也包括软件资源。<br/>
临界区就是并发进程访问临界资源的那段必须互斥执行的程序段。显然，一个变量可以有几个相关的临界区。<br/>
<p>2、解决进程之间互斥的硬件实现方法</p>
为了使进程互斥地进入临界区执行，可以采用如下解决方法。<br/>
<ol>
    <li>关中断</li>
    <li>使用测试和设置硬件指令</li>
</ol>
<p>信号量和P,V操作</p>
信号量：Semaphores。信号量表示系统共享资源的物理实体，它用一种数据结构描述：
<pre>
<code>
typedef struct{
    int value;
    struct process *list;
}semaphore;
</code>
</pre><br/>
其中，value使一个整形变量，其值大小表示该类资源的可用数量。<br/>
对于信号量s的操作只允许执行P, V原语操作。<br/>
P操作用P(s)表示，描述为执行P操作时，将信号量s.value的值减1，若s.value &gt;= 0，则执行
P操作的进程继续执行；若s.value&lt;0 则执行P操作的进程状态变为阻塞状态，并排到与该信号量有关
的List所指队列中等待。<br/>
V操作用V(s)表示，描述为：执行V操作时，将信号量s.value的值加1，若s.value的值不大于0，则执行V操作的
进程从与该信号量有关的list所指队列中释放一个进程，使它由阻塞变为就绪状态。<br/>
从物理意义上理解，P操作相当于申请资源，V操作相当于释放资源。<br/>
<p>1.利用信号量实现进程之间的互斥</p>为了正确地解决一组并发进程对临界资源的互斥共享，这里引入一个互斥
信号量，用mutex表示。对于互斥使用的资源，其信号量的初始值只能为1。任何欲进入临界区执行的进程，
必须先对互斥信号量mutex执行P操作，即将mutex值减1。若减1后mutex值为0，表示临界资源区空闲，执行P操作
的进程可以进入临界区执行。
</body>
</html>